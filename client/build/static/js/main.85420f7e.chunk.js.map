{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","getData","a","axios","get","result","formatData","data","map","row","index","key","value","name","setState","console","log","handleChange","event","target","state","couponName","couponType","expiryDate","minPurchase","discount","handleSubmit","preventDefault","body","type","endDate","minAmt","post","handleSelect","cartAmount","coupons","valueAfterDiscount","couponApplied","this","_","coupon","className","_id","Date","toLocaleDateString","style","padding","placeholder","onSelect","record","couponCode","valueAfterFlat","valid","onFocus","onChange","fuseConfigs","threshold","onClick","textAlign","width","margin","flexDirection","display","justifyContent","paddingTop","e","id","renderContent","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.85420f7e.chunk.js","sourcesContent":["\nimport React, { Component } from 'react'\nimport ReactSearchBox from 'react-search-box'\nimport './App.css'\nimport axios from 'axios'\nimport _ from \"lodash\";\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      cartAmount: 0,\n      data: [],\n      coupons: [],\n      valueAfterDiscount: 0,\n      couponName: '',\n      couponType: '',\n      expiryDate: '',\n      minPurchase: 0,\n      discount: 0,\n      couponApplied: false\n    }\n  }\n  async componentDidMount() {\n    const result = await axios.get('http://localhost:5000')\n    this.setState({ coupons: result.data })\n    console.log(this.state.coupons, \"in mount\");\n  }\n  renderContent() {\n    return _.map(\n      this.state.coupons,\n      (coupon) => {\n        return (\n          <div className=\"card blue-grey darken-1\" key={coupon._id}>\n            <div className=\"card-content\">\n              <span className=\"card-title\">{coupon.name}</span>\n              <p>{coupon.minAmt}</p>\n              <p>{coupon.discount}</p>\n              <p>{coupon.type}</p>\n              <p className=\"right\">\n                Expires On : {new Date(coupon.endDate).toLocaleDateString()}\n              </p>\n            </div>\n          </div>\n        );\n      }\n    );\n  }\n\n  getData = async () => {\n    const result = await axios.get('http://localhost:5000')\n    let formatData = result.data.map((row, index) => {\n      return {\n        key: `${index + 1}`,\n        value: row.name\n      }\n    })\n    this.setState({ data: formatData })\n    console.log(\"mounted\", formatData);\n  }\n\n  handleChange = event => {\n    console.log(event.target);\n    const key = event.target.name\n    let state = this.state\n    if (key === \"couponName\")\n      this.setState({ ...state, couponName: event.target.value });\n    if (key === \"couponType\")\n      this.setState({ ...state, couponType: event.target.value });\n    if (key === \"expiryDate\")\n      this.setState({ ...state, expiryDate: event.target.value });\n    if (key === \"minPurchase\")\n      this.setState({ ...state, minPurchase: event.target.value });\n    if (key === \"discount\")\n      this.setState({ ...state, discount: event.target.value });\n  }\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    console.log(\"i'm in dada\");\n    const body = {\n      name: this.state.couponName,\n      type: this.state.couponType,\n      endDate: this.state.expiryDate,\n      minAmt: this.state.minPurchase,\n      discount: this.state.discount\n    }\n    console.log(body);\n    const result = await axios.post('http://localhost:5000/coupon/create', body)\n    console.log(result.data);\n\n  }\n  handleSelect = event => {\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div style={{ padding: '50px' }}>\n        <div className=\"card-content\">\n          <ReactSearchBox\n            placeholder=\"Search for coupon\"\n            data={this.state.data}\n            onSelect={async (record) => {\n              console.log(record.value, this.state.cartAmount)\n              const discount = await axios.post('http://localhost:5000/coupon', { cartAmount: this.state.cartAmount, couponCode: record.value })\n              console.log(\"discount\", discount.data);\n\n              this.setState({ ...this.state, valueAfterDiscount: discount.data.valueAfterFlat, couponApplied: discount.data.valid })\n            }}\n            onFocus={async () => {\n              console.log('This function is called when is focussed')\n              await this.getData()\n            }}\n            onChange={value => console.log(value)}\n            fuseConfigs={{\n              threshold: 0.05,\n            }}\n            value={this.state.couponCode}\n            \n          />\n          <button onClick={()=>{\n            this.setState({couponApplied:false,  data:[]})\n          }}>\n            Reset\n      </button>\n        </div>\n\n        <div style={{ textAlign: 'center', width: '50%', margin: '0 auto', flexDirection: 'row', display: 'flex', justifyContent: 'space-evenly', paddingTop: '50px' }}>\n\n          <button className=\"minus\" onClick={(e) => {\n            e.preventDefault()\n            if (!this.state.cartAmount <= 0)\n              this.setState({\n                cartAmount: this.state.cartAmount - 50\n              })\n          }}>-</button>\n          <button className=\"plus\" onClick={(e) => {\n            e.preventDefault()\n            this.setState({\n              cartAmount: this.state.cartAmount + 50\n            })\n          }}> +</button>\n\n          <div>\n            {this.state.couponApplied ?\n              <div>\n                valueAfterDiscount = {this.state.valueAfterDiscount===this.state.cartAmount ? <p>coupon code is expired</p> : this.state.valueAfterDiscount}\n              </div> : ''}\n            <div>cartAmount = {this.state.cartAmount}\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <h2>Create Coupon</h2>\n\n          <form>\n            <label >Coupon Name</label><br />\n            <input type=\"text\" id=\"couponName\" name=\"couponName\" value={this.state.couponName}\n              onChange={(e) => {\n                this.handleChange(e)\n              }}\n            /><br />\n            <label >Type</label><br />\n            <input type=\"text\" id=\"couponType\" name=\"couponType\" value={this.state.couponType}\n              onChange={(e) => {\n                this.handleChange(e)\n              }} /><br />\n            <label >Expiry Date</label><br />\n            <input type=\"date\" id=\"expiryDate\" name=\"expiryDate\" value={this.state.expiryDate}\n              onChange={(e) => {\n                this.handleChange(e)\n              }} /><br />\n            <label>Minimum Purchase Amount</label><br />\n            <input type=\"number\" id=\"minPurchase\" name=\"minPurchase\" value={this.state.minPurchase}\n              onChange={(e) => {\n                this.handleChange(e)\n              }} /><br />\n            <label >Discount Amount</label><br />\n            <input type=\"number\" id=\"discount\" name=\"discount\" value={this.state.discount}\n              onChange={(e) => {\n                this.handleChange(e)\n              }} /><br /><br />\n            <button type=\"submit\" onClick={async (e) => { this.handleSubmit(e) }}> Create </button>\n\n          </form>\n        </div>\n\n        <div>\n          <h5>CouponS</h5>\n          {this.renderContent()}\n        </div>\n\n\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}